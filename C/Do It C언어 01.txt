01 컴퓨터의 자료 기억 방식

컴퓨터는 주기억 장치로 램(RAM, Random Access Memory)을 사용하기 때문에 보통 메모리라고 하면 램을 의미한다
메모리는 1바이트(Byte) 단위로 주소가 매겨져 있으며 운영체제마다 주소를 관리하는 방법이 조금씩 다르다
주소가 1바이트 단위로 부여돼 있다고 해서 데이터가 꼭 1바이트 단위로 저장되어야 하는것이 아니다
1바이트 단위는 운영체제가 메모리를 관리하는 단위이고, 컴퓨터는 이보다 더 작은 비트 단위로 정보를 저장하거나 읽을 수 있다

메모리의 최소 저장 단위는 비트(Bit) 1비트는 0 또는 1을 저장할 수 있는 공간이다
저장 단위가 1비트 증가할 때마다 저장 단위는 2배로 늘어난다
비트가 8개 모이면 새로운 단위 바이트(Byte)를 사용한다

부호 비트를 사용하여 양수와 음수를 구별한다
1바이트 기준으로 양수일 경우 비트 8개에 모두 숫자를 저장하지만 음수일 경우 비트 1개에는 음수 또는 양수인지의 상태를 저장하고 나머지 비트 7개에 숫자를 저장한다


02 자료형의 종류

컴퓨터 메모리 1바이트(Byte) 단위로 주소가 부여돼 있다고 해서 데이터를 저장하거나 읽을 때 1바이트 단위로만 사용해야 하는 것은 아니다
자신이 사용할 데이터의 크기에 맞게 메모리(저장 공간)를 할당해서 사용하면 된다
    데이터를 저장할 공간을 변수라고 한다
메모리를 사용할 때 몇 바이트의 메모리를 사용할 것인지를 명시해야 하는데, 이것을 데이터 타입(Date Type) 또는 자료형 이라고 한다

02.1 정수를 표현하는 자료형
C언어는 정수 값을 저장하는데 세가지 자료형을 사용한다

signed char : 부호가 있는 1바이트(8비트) 저장 공간
부호 있는 데이터를 처리하기 때문에 첫 1비트는 부호 비트로 사용하고 나머지 7비트에만 숫자를 저장한다
부호 비트가 0이면 양수를 의미하고 총 128개의 숫자(0 ~ 127) 중 하나를 저장할 수 있다
부호 비트가 1이면 음수를 의미하고 총 128개의 숫자(-128 ~ -1) 중 하나를 저장할 수 있다
따라서 signed char 자료형은 -128 ~ 127의 숫자 중 하나를 저장할 수 있는 크기이다
    ex) 현재 온도를 저장해야 한다면 우리나라 기온이 아무리 추워도 영하 128℃ 보다 낮아지지 않고 아무리 더워도 영상 127℃ 를 넘지 않을 것이기 때문에 signed char 자료형을 사용하면 충분히 저장할 수 있게 된다
        signed char temperature;
        temperature = -2;     /* 영하 2℃를 temperature 변수에 저장함 */

unsigned char : 부호가 없는 1바이트(8비트) 저장 공간
부호 비트 없이 1바이트 전체를 숫자 저장 공간으로 사용하기 떄문에 256개의 숫자(0 ~ 255) 중 하나를 저장할 수 있는 크기이다
    ex) 사람의 나이를 저장하고 시ㅠ다면 1살에서 150살 사이의 유효 범위를 예상할 수 있기 때문에 unsigned char 자료형을 사용하면 충분히 저장할 수 있게 된다
        unsigned char age;
        age = 52;     /* 나이 52살을 age 변수에 저장함 */

signed short int : 부호가 있는 2바이트(16비트) 저장 공간
부호 있는 데이터를 처리하기 때문에 첫 1비트는 부호 비트로 사용하고 나머지 15비트에만 숫자를 저장한다
부호 비트가 0이면 양수를 의미하고 총 32,768개의 숫자(0 ~ 32,767) 중 하나를 저장할 수 있다
부호 비트가 1이면 음수를 의미하고 총 32,768개의 숫자(-32,768 ~ -1) 중 하나를 저장할 수 있다
따라서 signed short int 자료형은 -32,768 ~ 32,767의 숫자 중 하나를 저장할 수 있는 크기이다
    ex) 오늘을 기준으로 며칠이 지났는지 아니면 며칠이 남았는지 D-day를 저장 할때 기준값이 되는 오늘을 0이라고 하면 -5는 5일전 7은 7일후가 된다
        앞뒤로 10년 정도 표시할 경우 shigned short int 자료형을 사용하면 충분히 저장할 수 있게 된다
        signed short int dday;
        dday = -20;     /* D-Day가 20일 남았다고 dday라는 변수에 저장함 */

unsigned short int : 부호가 없는 2바이트(16비트) 저장 공간
부호 비트 없이 2바이트 전체를 숫자 저장 공간으로 사용하기 떄문에 65,536개의 숫자(0 ~ 65,535) 중 하나를 저장할 수 있는 크기이다
    ex) 10시간 이내의 값을 초 단위로 저장해야 할 경우 유효범위가 0~36,000이 되기 때문에 unsigned short int 자료형을 사용하면 충분히 저장할 수 있게 된다
        unsigned short int seconds;
        seconds = 35000;     /* 3만 5000초를 seconds 변수에 저장함 */

signed long int : 부호가 잇는 4바이트(32비트) 저장 공간
부호 있는 데이터를 처리하기 때문에 첫 1비트는 부호 비트로 사용하고 나머지 31비트에만 숫자를 저장한다
부호 비트가 0이면 양수를 의미하고 총 2,147,483,648개의 숫자(0 ~ 2,147,483,647) 중 하나를 저장할 수 있다
부호 비트가 1이면 음수를 의미하고 총 2,147,483,648개의 숫자(-2,147,483,648 ~ -1) 중 하나를 저장할 수 있다
따라서 signed long int 자료형은 -2,147,483,648 ~ 2,147,483,647 의 숫자 중 하나를 저장할 수 있는 크기이다
    ex) 자신의 재정 상태를 기록해 놓는 변수를 만들 경우 큰부자가 아니라면 20억 원 정도까지 저장할수 있기 때문에 signed long int 자료형을 사용하면 충분히 저장할 수 있게 된다
        signed long int money;
        money; = 7,000,000;     /* 700만원을 money 변수에 저장함 */

unsigned long int : 부호가 없는 4바이트 저장 공간
부호 비트 없이 4바이트 전체를 숫자 저장 공간으로 사용하기 떄문에 4,294,967,296개의 숫자(0 ~ 4,294,967,295) 중 하나를 저장할 수 있는 크기이다
    ex) 원하는 시간 부터 현재 시간 까지 흘러간 시간을 초 단위로 환산해 저장할 경우 unsigned long int 자료형을 사용하면 충분히 저장할 수 있게 된다
        unsigend long int time_seconds;
        time_seconds = 1453100624;
